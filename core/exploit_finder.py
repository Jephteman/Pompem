#!/usr/bin/python3.5
# -*- coding: utf-8 -*-

NUM_WORKERS = 5
from core.scrapers import PacketStorm, CXSecurity, ZeroDay, Vulners, \
    NationaVulnerabilityDB, WpvulndbB
from common.print_messages import show_results, show_results_local
from common.writers import write_html, write_html_local, write_txt, write_txt_local
from common.writers import open_url
from common.print_messages import GENERATE_TXT_FILE


import subprocess
import sys

exploitdb_db_path = '/usr/share/exploitdb/files_exploits.csv'

class ExploitFinder(object):
    def __init__(self, args=None):
        self.parameters = args
        self.key_words = self.parameters.keywords.split(',')
        self.list_scrapers = [PacketStorm,
                              CXSecurity,
                              Vulners,
                              NationaVulnerabilityDB,
                              WpvulndbB
                              ]

    def online(self, ):
        all_data = {}
        for word_search in self.key_words:
            l_result = []
            l_threads = []
            for scraper_class in self.list_scrapers:
                scraper_instance = scraper_class(word_search)
                scraper_instance.start()
                l_threads.append(scraper_instance)
            [l_result.append(
                {'{0}'.format(th.name_class): th.join()}) for th in l_threads]
            all_data[word_search] = l_result
            show_results(word_search, l_result)
        if self.parameters.html_out:
            write_html(all_data)
            open_url('out.html')
        if self.parameters.txt_out:
            write_txt(all_data)
            print(GENERATE_TXT_FILE)

    def offline(self, ):
        if sys.platform != 'linux':
            print('This option is available only in Linux')
            exit(-1)

        if subprocess.getstatusoutput('which exploitdb' or ' which searchsploit')[0] != 0:
            print('Please , install exploitdb package \n')
            exit(1)

        l_result_begin = []
        lines = open(exploitdb_db_path,'r')
        attr = lines.readline()

        for line in lines.readlines():
            for i in self.key_words:
                if i in line:
                    l_result_begin.append(line)
        
        l_result_finatity = []
        for i in l_result_begin:
            tmp = i.split(sep=',')
            tmp_dict = [] 
            for n in [0,11,15,16]:
                tmp_dict.append(tmp[n])
            l_result_finatity.append(tmp_dict)

        show_results_local(self.key_words, l_result_finatity)

        if self.parameters.html_out:
            write_html_local(l_result_finatity)
            #open_url('out.html')
        if self.parameters.txt_out:
            write_txt(l_result_finatity)
            #print(GENERATE_TXT_FILE)
    def run(self,):
        if self.parameters.local:
            self.offline()
        else:
            self.online()